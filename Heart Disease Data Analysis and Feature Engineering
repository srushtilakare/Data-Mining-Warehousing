import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt 
import seaborn as sns 

# Load the dataset
file_path = "/mnt/data/heart.csv"
df = pd.read_csv(file_path)

# Display the first five rows
print(df.head())

# Check for missing values and handle them
for column in df.columns:
    if df[column].isnull().sum() > 0:
        if df[column].dtype == 'object':
            df[column].fillna(df[column].mode()[0], inplace=True)
        else:
            df[column].fillna(df[column].mean(), inplace=True)

# Display dataset description
print(df.describe())

# Display dataset info
df.info()

# Identify outliers using the IQR method
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
outliers = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).sum()
print(outliers)

# Boxplot for numerical attributes
df.select_dtypes(include=['int64', 'float64']).boxplot()
plt.xticks(rotation=45)
plt.title("Boxplot of Numerical Features")
plt.show()

# Scatter plot of RestingBP vs Cholesterol
sns.scatterplot(x=df['RestingBP'], y=df['Cholesterol'], hue=df['HeartDisease'])
plt.title("Scatter Plot of RestingBP vs Cholesterol")
plt.xlabel("RestingBP")
plt.ylabel("Cholesterol")
plt.show()

# Functions to calculate standard deviation and variance manually
def standard_deviation(data):
    mean = sum(data) / len(data)
    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)
    return np.sqrt(variance)

def variance(data):
    mean = sum(data) / len(data)
    return sum((x - mean) ** 2 for x in data) / (len(data) - 1)

numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns
std_dev = {col: standard_deviation(df[col]) for col in numerical_columns}
var = {col: variance(df[col]) for col in numerical_columns}
print("Standard Deviation:", std_dev)
print("Variance:", var)

# Functions to calculate covariance and correlation coefficient manually
def covariance(x, y):
    mean_x, mean_y = sum(x) / len(x), sum(y) / len(y)
    return sum((a - mean_x) * (b - mean_y) for a, b in zip(x, y)) / (len(x) - 1)

def correlation_coefficient(x, y):
    return covariance(x, y) / (standard_deviation(x) * standard_deviation(y))

cov_matrix = {col: {col2: covariance(df[col], df[col2]) for col2 in numerical_columns} for col in numerical_columns}
corr_matrix = {col: {col2: correlation_coefficient(df[col], df[col2]) for col2 in numerical_columns} for col in numerical_columns}
print("Covariance Matrix:", cov_matrix)
print("Correlation Coefficient Matrix:", corr_matrix)

# Feature analysis
independent_features = [col for col in numerical_columns if all(abs(corr_matrix[col][col2]) < 0.3 for col2 in numerical_columns if col != col2)]
low_variance_features = [col for col in numerical_columns if var[col] < 1]
print("Independent Features:", independent_features)
print("Unwanted Features:", low_variance_features)

# Equi-frequency binning for Age
def equi_frequency_binning(data, bins):
    sorted_data = sorted(data)
    bin_size = len(data) // bins
    return [sorted_data[i:i+bin_size] for i in range(0, len(sorted_data), bin_size)]

age_bins = equi_frequency_binning(df['Age'].tolist(), 4)
print("Age Bins:", age_bins)

# Normalization functions
def min_max_normalization(data):
    min_val, max_val = min(data), max(data)
    return [(x - min_val) / (max_val - min_val) for x in data]

def z_score_normalization(data):
    mean, std = sum(data) / len(data), standard_deviation(data)
    return [(x - mean) / std for x in data]

def decimal_scaling_normalization(data):
    max_abs_val = max(abs(x) for x in data)
    j = len(str(int(max_abs_val)))
    return [x / (10 ** j) for x in data]

# Normalize RestBP, Chol, and MaxHR using different methods
normalized_data = {
    "Min-Max": {
        "RestingBP": min_max_normalization(df['RestingBP']),
        "Cholesterol": min_max_normalization(df['Cholesterol']),
        "MaxHR": min_max_normalization(df['MaxHR'])
    },
    "Z-Score": {
        "RestingBP": z_score_normalization(df['RestingBP']),
        "Cholesterol": z_score_normalization(df['Cholesterol']),
        "MaxHR": z_score_normalization(df['MaxHR'])
    },
    "Decimal Scaling": {
        "RestingBP": decimal_scaling_normalization(df['RestingBP']),
        "Cholesterol": decimal_scaling_normalization(df['Cholesterol']),
        "MaxHR": decimal_scaling_normalization(df['MaxHR'])
    }
}

print("Normalized Data:", normalized_data)
